//
//  FTypeKind.swift
// 
//  Created by Scott on 2022/6/21.
//  Copyright Â© 2022 portto. All rights reserved.
//

import Foundation

public enum FTypeKind: String, Equatable, Codable {
    case `any` = "Any"
    case anyStruct = "AnyStruct"
    case anyResource = "AnyResource"
    case type = "Type"
    case void = "Void"
    case never = "Never"
    case bool = "Bool"
    case string = "String"
    case character = "Character"
    case bytes = "Bytes"
    case address = "Address"
    case number = "Number"
    case signedNumber = "SignedNumber"
    case integer = "Integer"
    case signedInteger = "SignedInteger"
    case fixedPoint = "FixedPoint"
    case signedFixedPoint = "SignedFixedPoint"
    case int = "Int"
    case int8 = "Int8"
    case int16 = "Int16"
    case int32 = "Int32"
    case int64 = "Int64"
    case int128 = "Int128"
    case int256 = "Int256"
    case uint = "UInt"
    case uint8 = "UInt8"
    case uint16 = "UInt16"
    case uint32 = "UInt32"
    case uint64 = "UInt64"
    case uint128 = "UInt128"
    case uint256 = "UInt256"
    case word8 = "Word8"
    case word16 = "Word16"
    case word32 = "Word32"
    case word64 = "Word64"
    case fix64 = "Fix64"
    case ufix64 = "UFix64"
    case path = "Path"
    case capabilityPath = "CapabilityPath"
    case storagePath = "StoragePath"
    case publicPath = "PublicPath"
    case privatePath = "PrivatePath"
    case authAccount = "AuthAccount"
    case publicAccount = "PublicAccount"
    case authAccountKeys = "AuthAccount.Keys"
    case publicAccountKeys = "PublicAccount.Keys"
    case authAccountContracts = "AuthAccount.Contracts"
    case publicAccountContracts = "PublicAccount.Contracts"
    case deployedContract = "DeployedContract"
    case accountKey = "AccountKey"
    case block = "Block"
    case `optional` = "Optional"
    case variableSizedArray = "VariableSizedArray"
    case constantSizedArray = "ConstantSizedArray"
    case dictionary = "Dictionary"
    case `struct` = "Struct"
    case resource = "Resource"
    case event = "Event"
    case contract = "Contract"
    case structInterface = "StructInterface"
    case resourceInterface = "ResourceInterface"
    case contractInterface = "ContractInterface"
    case function = "Function"
    case reference = "Reference"
    case restriction = "Restriction"
    case capability = "Capability"
    case `enum` = "Enum"
}
