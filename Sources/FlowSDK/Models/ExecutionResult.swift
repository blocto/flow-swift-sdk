//
//  ExecutionResult.swift
// 
//  Created by Scott on 2022/6/1.
//  Copyright Â© 2022 portto. All rights reserved.
//

import Foundation

public struct ExecutionResult: Equatable {

    public let previousResultId: Identifier

    public let blockId: Identifier

    public let chunks: [Chunk]

    public let serviceEvents: [ServiceEvent]

    public init(
        previousResultId: Identifier,
        blockId: Identifier,
        chunks: [Chunk],
        serviceEvents: [ServiceEvent]
    ) {
        self.previousResultId = previousResultId
        self.blockId = blockId
        self.chunks = chunks
        self.serviceEvents = serviceEvents
    }

    init(_ value: Flow_Entities_ExecutionResult) {
        self.previousResultId = Identifier(data: value.previousResultID)
        self.blockId = Identifier(data: value.blockID)
        self.chunks = value.chunks.map { Chunk($0) }
        self.serviceEvents = value.serviceEvents.map { ServiceEvent($0) }
    }
}

public typealias StateCommitment = Identifier

public struct Chunk: Equatable {

    public let collectionIndex: UInt

    /// start state when starting executing this chunk
    public let startState: StateCommitment

    /// Hash of events generated by executing results
    public let eventCollection: Data

    /// Block id of the execution result this chunk belongs to
    public let blockId: Identifier

    /// total amount of computation used by running all txs in this chunk
    public let totalComputationUsed: UInt64

    /// number of transactions inside the collection
    public let numberOfTransactions: UInt32

    /// chunk index inside the ER (starts from zero)
    public let index: UInt64

    /// endState inferred from next chunk or from the ER
    public let endState: StateCommitment

    public init(
        collectionIndex: UInt,
        startState: StateCommitment,
        eventCollection: Data,
        blockId: Identifier,
        totalComputationUsed: UInt64,
        numberOfTransactions: UInt32,
        index: UInt64,
        endState: StateCommitment
    ) {
        self.collectionIndex = collectionIndex
        self.startState = startState
        self.eventCollection = eventCollection
        self.blockId = blockId
        self.totalComputationUsed = totalComputationUsed
        self.numberOfTransactions = numberOfTransactions
        self.index = index
        self.endState = endState
    }

    init(_ value: Flow_Entities_Chunk) {
        self.collectionIndex = UInt(value.collectionIndex)
        self.startState = StateCommitment(data: value.startState)
        self.eventCollection = value.eventCollection
        self.blockId = Identifier(data: value.blockID)
        self.totalComputationUsed = value.totalComputationUsed
        self.numberOfTransactions = value.numberOfTransactions
        self.index = value.index
        self.endState = StateCommitment(data: value.endState)
    }
}

public struct ServiceEvent: Equatable {

    public let type: String

    public let payload: Data

    public init(type: String, payload: Data) {
        self.type = type
        self.payload = payload
    }

    init(_ value: Flow_Entities_ServiceEvent) {
        self.type = value.type
        self.payload = value.payload
    }
}
