// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: flow/entities/block.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Flow_Entities_Block {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Data {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var parentID: Data {
    get {return _storage._parentID}
    set {_uniqueStorage()._parentID = newValue}
  }

  public var height: UInt64 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  public var collectionGuarantees: [Flow_Entities_CollectionGuarantee] {
    get {return _storage._collectionGuarantees}
    set {_uniqueStorage()._collectionGuarantees = newValue}
  }

  public var blockSeals: [Flow_Entities_BlockSeal] {
    get {return _storage._blockSeals}
    set {_uniqueStorage()._blockSeals = newValue}
  }

  public var signatures: [Data] {
    get {return _storage._signatures}
    set {_uniqueStorage()._signatures = newValue}
  }

  public var executionReceiptMetaList: [Flow_Entities_ExecutionReceiptMeta] {
    get {return _storage._executionReceiptMetaList}
    set {_uniqueStorage()._executionReceiptMetaList = newValue}
  }

  public var executionResultList: [Flow_Entities_ExecutionResult] {
    get {return _storage._executionResultList}
    set {_uniqueStorage()._executionResultList = newValue}
  }

  public var blockHeader: Flow_Entities_BlockHeader {
    get {return _storage._blockHeader ?? Flow_Entities_BlockHeader()}
    set {_uniqueStorage()._blockHeader = newValue}
  }
  /// Returns true if `blockHeader` has been explicitly set.
  public var hasBlockHeader: Bool {return _storage._blockHeader != nil}
  /// Clears the value of `blockHeader`. Subsequent reads from it will return its default value.
  public mutating func clearBlockHeader() {_uniqueStorage()._blockHeader = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Flow_Entities_Block: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "flow.entities"

extension Flow_Entities_Block: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Block"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "parent_id"),
    3: .same(proto: "height"),
    4: .same(proto: "timestamp"),
    5: .standard(proto: "collection_guarantees"),
    6: .standard(proto: "block_seals"),
    7: .same(proto: "signatures"),
    8: .standard(proto: "execution_receipt_metaList"),
    9: .standard(proto: "execution_result_list"),
    10: .standard(proto: "block_header"),
  ]

  fileprivate class _StorageClass {
    var _id: Data = Data()
    var _parentID: Data = Data()
    var _height: UInt64 = 0
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _collectionGuarantees: [Flow_Entities_CollectionGuarantee] = []
    var _blockSeals: [Flow_Entities_BlockSeal] = []
    var _signatures: [Data] = []
    var _executionReceiptMetaList: [Flow_Entities_ExecutionReceiptMeta] = []
    var _executionResultList: [Flow_Entities_ExecutionResult] = []
    var _blockHeader: Flow_Entities_BlockHeader? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _parentID = source._parentID
      _height = source._height
      _timestamp = source._timestamp
      _collectionGuarantees = source._collectionGuarantees
      _blockSeals = source._blockSeals
      _signatures = source._signatures
      _executionReceiptMetaList = source._executionReceiptMetaList
      _executionResultList = source._executionResultList
      _blockHeader = source._blockHeader
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBytesField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularBytesField(value: &_storage._parentID) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._height) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._timestamp) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._collectionGuarantees) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._blockSeals) }()
        case 7: try { try decoder.decodeRepeatedBytesField(value: &_storage._signatures) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._executionReceiptMetaList) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._executionResultList) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._blockHeader) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._parentID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._parentID, fieldNumber: 2)
      }
      if _storage._height != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._height, fieldNumber: 3)
      }
      try { if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._collectionGuarantees.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._collectionGuarantees, fieldNumber: 5)
      }
      if !_storage._blockSeals.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._blockSeals, fieldNumber: 6)
      }
      if !_storage._signatures.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._signatures, fieldNumber: 7)
      }
      if !_storage._executionReceiptMetaList.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._executionReceiptMetaList, fieldNumber: 8)
      }
      if !_storage._executionResultList.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._executionResultList, fieldNumber: 9)
      }
      try { if let v = _storage._blockHeader {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Flow_Entities_Block, rhs: Flow_Entities_Block) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._parentID != rhs_storage._parentID {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._collectionGuarantees != rhs_storage._collectionGuarantees {return false}
        if _storage._blockSeals != rhs_storage._blockSeals {return false}
        if _storage._signatures != rhs_storage._signatures {return false}
        if _storage._executionReceiptMetaList != rhs_storage._executionReceiptMetaList {return false}
        if _storage._executionResultList != rhs_storage._executionResultList {return false}
        if _storage._blockHeader != rhs_storage._blockHeader {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
