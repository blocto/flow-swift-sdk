//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: flow/execution/execution.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import FlowSDK
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// ExecutionAPI is the API provided by the execution nodes.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Flow_Execution_ExecutionAPIProvider: CallHandlerProvider {
  var interceptors: Flow_Execution_ExecutionAPIServerInterceptorFactoryProtocol? { get }

  /// Ping is used to check if the access node is alive and healthy.
  func ping(request: Flow_Execution_PingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Execution_PingResponse>

  /// GetAccountAtBlockID gets an account by address at the given block ID
  func getAccountAtBlockID(request: Flow_Execution_GetAccountAtBlockIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Execution_GetAccountAtBlockIDResponse>

  /// ExecuteScriptAtBlockID executes a ready-only Cadence script against the
  /// execution state at the block with the given ID.
  func executeScriptAtBlockID(request: Flow_Execution_ExecuteScriptAtBlockIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Execution_ExecuteScriptAtBlockIDResponse>

  /// GetEventsForBlockIDs retrieves events for all the specified block IDs that
  /// have the given type
  func getEventsForBlockIDs(request: Flow_Execution_GetEventsForBlockIDsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Execution_GetEventsForBlockIDsResponse>

  /// GetTransactionResult gets the result of a transaction.
  func getTransactionResult(request: Flow_Execution_GetTransactionResultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Execution_GetTransactionResultResponse>

  /// GetTransactionResultByIndex gets the result of a transaction at the index .
  func getTransactionResultByIndex(request: Flow_Execution_GetTransactionByIndexRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Execution_GetTransactionResultResponse>

  /// GetTransactionResultByIndex gets the results of all transactions in the
  /// block ordered by transaction index
  func getTransactionResultsByBlockID(request: Flow_Execution_GetTransactionsByBlockIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Execution_GetTransactionResultsResponse>

  /// GetRegisterAtBlockID collects a register at the block with the given ID (if
  /// available).
  func getRegisterAtBlockID(request: Flow_Execution_GetRegisterAtBlockIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Execution_GetRegisterAtBlockIDResponse>

  /// GetLatestBlockHeader gets the latest sealed or unsealed block header.
  func getLatestBlockHeader(request: Flow_Execution_GetLatestBlockHeaderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Execution_BlockHeaderResponse>

  /// GetBlockHeaderByID gets a block header by ID.
  func getBlockHeaderByID(request: Flow_Execution_GetBlockHeaderByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Execution_BlockHeaderResponse>
}

extension Flow_Execution_ExecutionAPIProvider {
  internal var serviceName: Substring {
    return Flow_Execution_ExecutionAPIServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_PingRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "GetAccountAtBlockID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetAccountAtBlockIDRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_GetAccountAtBlockIDResponse>(),
        interceptors: self.interceptors?.makeGetAccountAtBlockIDInterceptors() ?? [],
        userFunction: self.getAccountAtBlockID(request:context:)
      )

    case "ExecuteScriptAtBlockID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_ExecuteScriptAtBlockIDRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_ExecuteScriptAtBlockIDResponse>(),
        interceptors: self.interceptors?.makeExecuteScriptAtBlockIDInterceptors() ?? [],
        userFunction: self.executeScriptAtBlockID(request:context:)
      )

    case "GetEventsForBlockIDs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetEventsForBlockIDsRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_GetEventsForBlockIDsResponse>(),
        interceptors: self.interceptors?.makeGetEventsForBlockIDsInterceptors() ?? [],
        userFunction: self.getEventsForBlockIDs(request:context:)
      )

    case "GetTransactionResult":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetTransactionResultRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_GetTransactionResultResponse>(),
        interceptors: self.interceptors?.makeGetTransactionResultInterceptors() ?? [],
        userFunction: self.getTransactionResult(request:context:)
      )

    case "GetTransactionResultByIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetTransactionByIndexRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_GetTransactionResultResponse>(),
        interceptors: self.interceptors?.makeGetTransactionResultByIndexInterceptors() ?? [],
        userFunction: self.getTransactionResultByIndex(request:context:)
      )

    case "GetTransactionResultsByBlockID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetTransactionsByBlockIDRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_GetTransactionResultsResponse>(),
        interceptors: self.interceptors?.makeGetTransactionResultsByBlockIDInterceptors() ?? [],
        userFunction: self.getTransactionResultsByBlockID(request:context:)
      )

    case "GetRegisterAtBlockID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetRegisterAtBlockIDRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_GetRegisterAtBlockIDResponse>(),
        interceptors: self.interceptors?.makeGetRegisterAtBlockIDInterceptors() ?? [],
        userFunction: self.getRegisterAtBlockID(request:context:)
      )

    case "GetLatestBlockHeader":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetLatestBlockHeaderRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_BlockHeaderResponse>(),
        interceptors: self.interceptors?.makeGetLatestBlockHeaderInterceptors() ?? [],
        userFunction: self.getLatestBlockHeader(request:context:)
      )

    case "GetBlockHeaderByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetBlockHeaderByIDRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_BlockHeaderResponse>(),
        interceptors: self.interceptors?.makeGetBlockHeaderByIDInterceptors() ?? [],
        userFunction: self.getBlockHeaderByID(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// ExecutionAPI is the API provided by the execution nodes.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Flow_Execution_ExecutionAPIAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Flow_Execution_ExecutionAPIServerInterceptorFactoryProtocol? { get }

  /// Ping is used to check if the access node is alive and healthy.
  @Sendable func ping(
    request: Flow_Execution_PingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flow_Execution_PingResponse

  /// GetAccountAtBlockID gets an account by address at the given block ID
  @Sendable func getAccountAtBlockID(
    request: Flow_Execution_GetAccountAtBlockIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flow_Execution_GetAccountAtBlockIDResponse

  /// ExecuteScriptAtBlockID executes a ready-only Cadence script against the
  /// execution state at the block with the given ID.
  @Sendable func executeScriptAtBlockID(
    request: Flow_Execution_ExecuteScriptAtBlockIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flow_Execution_ExecuteScriptAtBlockIDResponse

  /// GetEventsForBlockIDs retrieves events for all the specified block IDs that
  /// have the given type
  @Sendable func getEventsForBlockIDs(
    request: Flow_Execution_GetEventsForBlockIDsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flow_Execution_GetEventsForBlockIDsResponse

  /// GetTransactionResult gets the result of a transaction.
  @Sendable func getTransactionResult(
    request: Flow_Execution_GetTransactionResultRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flow_Execution_GetTransactionResultResponse

  /// GetTransactionResultByIndex gets the result of a transaction at the index .
  @Sendable func getTransactionResultByIndex(
    request: Flow_Execution_GetTransactionByIndexRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flow_Execution_GetTransactionResultResponse

  /// GetTransactionResultByIndex gets the results of all transactions in the
  /// block ordered by transaction index
  @Sendable func getTransactionResultsByBlockID(
    request: Flow_Execution_GetTransactionsByBlockIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flow_Execution_GetTransactionResultsResponse

  /// GetRegisterAtBlockID collects a register at the block with the given ID (if
  /// available).
  @Sendable func getRegisterAtBlockID(
    request: Flow_Execution_GetRegisterAtBlockIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flow_Execution_GetRegisterAtBlockIDResponse

  /// GetLatestBlockHeader gets the latest sealed or unsealed block header.
  @Sendable func getLatestBlockHeader(
    request: Flow_Execution_GetLatestBlockHeaderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flow_Execution_BlockHeaderResponse

  /// GetBlockHeaderByID gets a block header by ID.
  @Sendable func getBlockHeaderByID(
    request: Flow_Execution_GetBlockHeaderByIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Flow_Execution_BlockHeaderResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Flow_Execution_ExecutionAPIAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Flow_Execution_ExecutionAPIServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Flow_Execution_ExecutionAPIServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Flow_Execution_ExecutionAPIServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_PingRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        wrapping: self.ping(request:context:)
      )

    case "GetAccountAtBlockID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetAccountAtBlockIDRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_GetAccountAtBlockIDResponse>(),
        interceptors: self.interceptors?.makeGetAccountAtBlockIDInterceptors() ?? [],
        wrapping: self.getAccountAtBlockID(request:context:)
      )

    case "ExecuteScriptAtBlockID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_ExecuteScriptAtBlockIDRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_ExecuteScriptAtBlockIDResponse>(),
        interceptors: self.interceptors?.makeExecuteScriptAtBlockIDInterceptors() ?? [],
        wrapping: self.executeScriptAtBlockID(request:context:)
      )

    case "GetEventsForBlockIDs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetEventsForBlockIDsRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_GetEventsForBlockIDsResponse>(),
        interceptors: self.interceptors?.makeGetEventsForBlockIDsInterceptors() ?? [],
        wrapping: self.getEventsForBlockIDs(request:context:)
      )

    case "GetTransactionResult":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetTransactionResultRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_GetTransactionResultResponse>(),
        interceptors: self.interceptors?.makeGetTransactionResultInterceptors() ?? [],
        wrapping: self.getTransactionResult(request:context:)
      )

    case "GetTransactionResultByIndex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetTransactionByIndexRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_GetTransactionResultResponse>(),
        interceptors: self.interceptors?.makeGetTransactionResultByIndexInterceptors() ?? [],
        wrapping: self.getTransactionResultByIndex(request:context:)
      )

    case "GetTransactionResultsByBlockID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetTransactionsByBlockIDRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_GetTransactionResultsResponse>(),
        interceptors: self.interceptors?.makeGetTransactionResultsByBlockIDInterceptors() ?? [],
        wrapping: self.getTransactionResultsByBlockID(request:context:)
      )

    case "GetRegisterAtBlockID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetRegisterAtBlockIDRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_GetRegisterAtBlockIDResponse>(),
        interceptors: self.interceptors?.makeGetRegisterAtBlockIDInterceptors() ?? [],
        wrapping: self.getRegisterAtBlockID(request:context:)
      )

    case "GetLatestBlockHeader":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetLatestBlockHeaderRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_BlockHeaderResponse>(),
        interceptors: self.interceptors?.makeGetLatestBlockHeaderInterceptors() ?? [],
        wrapping: self.getLatestBlockHeader(request:context:)
      )

    case "GetBlockHeaderByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flow_Execution_GetBlockHeaderByIDRequest>(),
        responseSerializer: ProtobufSerializer<Flow_Execution_BlockHeaderResponse>(),
        interceptors: self.interceptors?.makeGetBlockHeaderByIDInterceptors() ?? [],
        wrapping: self.getBlockHeaderByID(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Flow_Execution_ExecutionAPIServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingInterceptors() -> [ServerInterceptor<Flow_Execution_PingRequest, Flow_Execution_PingResponse>]

  /// - Returns: Interceptors to use when handling 'getAccountAtBlockID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccountAtBlockIDInterceptors() -> [ServerInterceptor<Flow_Execution_GetAccountAtBlockIDRequest, Flow_Execution_GetAccountAtBlockIDResponse>]

  /// - Returns: Interceptors to use when handling 'executeScriptAtBlockID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecuteScriptAtBlockIDInterceptors() -> [ServerInterceptor<Flow_Execution_ExecuteScriptAtBlockIDRequest, Flow_Execution_ExecuteScriptAtBlockIDResponse>]

  /// - Returns: Interceptors to use when handling 'getEventsForBlockIDs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetEventsForBlockIDsInterceptors() -> [ServerInterceptor<Flow_Execution_GetEventsForBlockIDsRequest, Flow_Execution_GetEventsForBlockIDsResponse>]

  /// - Returns: Interceptors to use when handling 'getTransactionResult'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionResultInterceptors() -> [ServerInterceptor<Flow_Execution_GetTransactionResultRequest, Flow_Execution_GetTransactionResultResponse>]

  /// - Returns: Interceptors to use when handling 'getTransactionResultByIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionResultByIndexInterceptors() -> [ServerInterceptor<Flow_Execution_GetTransactionByIndexRequest, Flow_Execution_GetTransactionResultResponse>]

  /// - Returns: Interceptors to use when handling 'getTransactionResultsByBlockID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTransactionResultsByBlockIDInterceptors() -> [ServerInterceptor<Flow_Execution_GetTransactionsByBlockIDRequest, Flow_Execution_GetTransactionResultsResponse>]

  /// - Returns: Interceptors to use when handling 'getRegisterAtBlockID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRegisterAtBlockIDInterceptors() -> [ServerInterceptor<Flow_Execution_GetRegisterAtBlockIDRequest, Flow_Execution_GetRegisterAtBlockIDResponse>]

  /// - Returns: Interceptors to use when handling 'getLatestBlockHeader'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLatestBlockHeaderInterceptors() -> [ServerInterceptor<Flow_Execution_GetLatestBlockHeaderRequest, Flow_Execution_BlockHeaderResponse>]

  /// - Returns: Interceptors to use when handling 'getBlockHeaderByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockHeaderByIDInterceptors() -> [ServerInterceptor<Flow_Execution_GetBlockHeaderByIDRequest, Flow_Execution_BlockHeaderResponse>]
}

internal enum Flow_Execution_ExecutionAPIServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ExecutionAPI",
    fullName: "flow.execution.ExecutionAPI",
    methods: [
      Flow_Execution_ExecutionAPIServerMetadata.Methods.ping,
      Flow_Execution_ExecutionAPIServerMetadata.Methods.getAccountAtBlockID,
      Flow_Execution_ExecutionAPIServerMetadata.Methods.executeScriptAtBlockID,
      Flow_Execution_ExecutionAPIServerMetadata.Methods.getEventsForBlockIDs,
      Flow_Execution_ExecutionAPIServerMetadata.Methods.getTransactionResult,
      Flow_Execution_ExecutionAPIServerMetadata.Methods.getTransactionResultByIndex,
      Flow_Execution_ExecutionAPIServerMetadata.Methods.getTransactionResultsByBlockID,
      Flow_Execution_ExecutionAPIServerMetadata.Methods.getRegisterAtBlockID,
      Flow_Execution_ExecutionAPIServerMetadata.Methods.getLatestBlockHeader,
      Flow_Execution_ExecutionAPIServerMetadata.Methods.getBlockHeaderByID,
    ]
  )

  internal enum Methods {
    internal static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/flow.execution.ExecutionAPI/Ping",
      type: GRPCCallType.unary
    )

    internal static let getAccountAtBlockID = GRPCMethodDescriptor(
      name: "GetAccountAtBlockID",
      path: "/flow.execution.ExecutionAPI/GetAccountAtBlockID",
      type: GRPCCallType.unary
    )

    internal static let executeScriptAtBlockID = GRPCMethodDescriptor(
      name: "ExecuteScriptAtBlockID",
      path: "/flow.execution.ExecutionAPI/ExecuteScriptAtBlockID",
      type: GRPCCallType.unary
    )

    internal static let getEventsForBlockIDs = GRPCMethodDescriptor(
      name: "GetEventsForBlockIDs",
      path: "/flow.execution.ExecutionAPI/GetEventsForBlockIDs",
      type: GRPCCallType.unary
    )

    internal static let getTransactionResult = GRPCMethodDescriptor(
      name: "GetTransactionResult",
      path: "/flow.execution.ExecutionAPI/GetTransactionResult",
      type: GRPCCallType.unary
    )

    internal static let getTransactionResultByIndex = GRPCMethodDescriptor(
      name: "GetTransactionResultByIndex",
      path: "/flow.execution.ExecutionAPI/GetTransactionResultByIndex",
      type: GRPCCallType.unary
    )

    internal static let getTransactionResultsByBlockID = GRPCMethodDescriptor(
      name: "GetTransactionResultsByBlockID",
      path: "/flow.execution.ExecutionAPI/GetTransactionResultsByBlockID",
      type: GRPCCallType.unary
    )

    internal static let getRegisterAtBlockID = GRPCMethodDescriptor(
      name: "GetRegisterAtBlockID",
      path: "/flow.execution.ExecutionAPI/GetRegisterAtBlockID",
      type: GRPCCallType.unary
    )

    internal static let getLatestBlockHeader = GRPCMethodDescriptor(
      name: "GetLatestBlockHeader",
      path: "/flow.execution.ExecutionAPI/GetLatestBlockHeader",
      type: GRPCCallType.unary
    )

    internal static let getBlockHeaderByID = GRPCMethodDescriptor(
      name: "GetBlockHeaderByID",
      path: "/flow.execution.ExecutionAPI/GetBlockHeaderByID",
      type: GRPCCallType.unary
    )
  }
}
